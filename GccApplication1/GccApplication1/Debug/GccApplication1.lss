
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008de  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066a  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000779  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c9  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000026a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	5a 01       	movw	r10, r20
  56:	5f 01       	movw	r10, r30
  58:	67 01       	movw	r12, r14
  5a:	6f 01       	movw	r12, r30
  5c:	77 01       	movw	r14, r14
  5e:	7f 01       	movw	r14, r30
  60:	87 01       	movw	r16, r14
  62:	8f 01       	movw	r16, r30
  64:	9f 01       	movw	r18, r30
  66:	a4 01       	movw	r20, r8
  68:	ac 01       	movw	r20, r24
  6a:	b4 01       	movw	r22, r8
  6c:	bc 01       	movw	r22, r24
  6e:	c4 01       	movw	r24, r8
  70:	cc 01       	movw	r24, r24
  72:	d4 01       	movw	r26, r8

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  84:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <main>:
#include "MCAL/Interrupt/Interrupt.h"
//define cpu clock 
#include "ECUAL/LED/LED.h"
#include "ECUAL/Button/button.h"

int main(void){
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	1f 92       	push	r1
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
	volatile EN_Driverstate_t x;
	while(1){
		x=Timer_Test();
  96:	0e 94 24 02 	call	0x448	; 0x448 <Timer_Test>
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	fc cf       	rjmp	.-8      	; 0x96 <main+0xa>

0000009e <Timer_mode>:
//Timer mode function
//input:timer number,timer mode number,timer compare out mode number
//output :enum for function error state
//function :this function sets for the required timer ,its mode &compare out mode
EN_functionstate_t Timer_mode(uint8_t timernumber,Timermode_t mode,uint8_t compareoutmode){
	switch(timernumber){
  9e:	88 23       	and	r24, r24
  a0:	21 f0       	breq	.+8      	; 0xaa <Timer_mode+0xc>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	09 f4       	brne	.+2      	; 0xa8 <Timer_mode+0xa>
  a6:	42 c0       	rjmp	.+132    	; 0x12c <Timer_mode+0x8e>
  a8:	82 c0       	rjmp	.+260    	; 0x1ae <Timer_mode+0x110>
		case Timer_0:
			if(mode==Normal)
  aa:	61 11       	cpse	r22, r1
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <Timer_mode+0x18>
			{
				TCCR0&=~(0x48);
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	87 7b       	andi	r24, 0xB7	; 183
  b2:	83 bf       	out	0x33, r24	; 51
  b4:	18 c0       	rjmp	.+48     	; 0xe6 <Timer_mode+0x48>
			}else if (mode==Ctc)
  b6:	61 30       	cpi	r22, 0x01	; 1
  b8:	39 f4       	brne	.+14     	; 0xc8 <Timer_mode+0x2a>
			{
				TCCR0&=~(1<<3);
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	87 7f       	andi	r24, 0xF7	; 247
  be:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(1<<6);
  c0:	83 b7       	in	r24, 0x33	; 51
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	83 bf       	out	0x33, r24	; 51
  c6:	0f c0       	rjmp	.+30     	; 0xe6 <Timer_mode+0x48>
			}else if (mode==pwm)
  c8:	62 30       	cpi	r22, 0x02	; 2
  ca:	39 f4       	brne	.+14     	; 0xda <Timer_mode+0x3c>
			{
				TCCR0&=~(1<<6);
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	8f 7b       	andi	r24, 0xBF	; 191
  d0:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(1<<3);
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	83 bf       	out	0x33, r24	; 51
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <Timer_mode+0x48>
			}else if(mode== fastpwm)
  da:	63 30       	cpi	r22, 0x03	; 3
  dc:	09 f0       	breq	.+2      	; 0xe0 <Timer_mode+0x42>
  de:	69 c0       	rjmp	.+210    	; 0x1b2 <Timer_mode+0x114>
			{
				TCCR0|=(0x48);
  e0:	83 b7       	in	r24, 0x33	; 51
  e2:	88 64       	ori	r24, 0x48	; 72
  e4:	83 bf       	out	0x33, r24	; 51
			}else{
				return Function_Error;
			}
			///***********compareoutmode
			if (compareoutmode==0)
  e6:	41 11       	cpse	r20, r1
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <Timer_mode+0x56>
			{
				TCCR0&=~(0x30);
  ea:	83 b7       	in	r24, 0x33	; 51
  ec:	8f 7c       	andi	r24, 0xCF	; 207
  ee:	83 bf       	out	0x33, r24	; 51
			{
				TCCR0|=(0x30);
			}else{
				return Function_Error; 
			}
			return Function_ok;
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret
			}
			///***********compareoutmode
			if (compareoutmode==0)
			{
				TCCR0&=~(0x30);
			}else if(compareoutmode==1)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	41 f4       	brne	.+16     	; 0x108 <Timer_mode+0x6a>
			{
				TCCR0|=(1<<4);
  f8:	83 b7       	in	r24, 0x33	; 51
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	83 bf       	out	0x33, r24	; 51
				TCCR0&=~(1<<5);
  fe:	83 b7       	in	r24, 0x33	; 51
 100:	8f 7d       	andi	r24, 0xDF	; 223
 102:	83 bf       	out	0x33, r24	; 51
			{
				TCCR0|=(0x30);
			}else{
				return Function_Error; 
			}
			return Function_ok;
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret
				TCCR0&=~(0x30);
			}else if(compareoutmode==1)
			{
				TCCR0|=(1<<4);
				TCCR0&=~(1<<5);
			}else if(compareoutmode==2)
 108:	42 30       	cpi	r20, 0x02	; 2
 10a:	41 f4       	brne	.+16     	; 0x11c <Timer_mode+0x7e>
			{
				TCCR0|=(1<<5);
 10c:	83 b7       	in	r24, 0x33	; 51
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	83 bf       	out	0x33, r24	; 51
				TCCR0&=~(1<<4);
 112:	83 b7       	in	r24, 0x33	; 51
 114:	8f 7e       	andi	r24, 0xEF	; 239
 116:	83 bf       	out	0x33, r24	; 51
			{
				TCCR0|=(0x30);
			}else{
				return Function_Error; 
			}
			return Function_ok;
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
			}else if(compareoutmode==2)
			{
				TCCR0|=(1<<5);
				TCCR0&=~(1<<4);
				
			}else if (compareoutmode==3)
 11c:	43 30       	cpi	r20, 0x03	; 3
 11e:	09 f0       	breq	.+2      	; 0x122 <Timer_mode+0x84>
 120:	4a c0       	rjmp	.+148    	; 0x1b6 <Timer_mode+0x118>
			{
				TCCR0|=(0x30);
 122:	83 b7       	in	r24, 0x33	; 51
 124:	80 63       	ori	r24, 0x30	; 48
 126:	83 bf       	out	0x33, r24	; 51
			}else{
				return Function_Error; 
			}
			return Function_ok;
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
		break;
	//********timer2	
		case Timer_2:
			if(mode==Normal)
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <Timer_mode+0x9a>
			{
				TCCR2&=~(0x48);
 130:	85 b5       	in	r24, 0x25	; 37
 132:	87 7b       	andi	r24, 0xB7	; 183
 134:	85 bd       	out	0x25, r24	; 37
 136:	17 c0       	rjmp	.+46     	; 0x166 <Timer_mode+0xc8>
			}else if (mode==Ctc)
 138:	61 30       	cpi	r22, 0x01	; 1
 13a:	39 f4       	brne	.+14     	; 0x14a <Timer_mode+0xac>
			{
				TCCR2&=~(1<<3);
 13c:	85 b5       	in	r24, 0x25	; 37
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(1<<6);
 142:	85 b5       	in	r24, 0x25	; 37
 144:	80 64       	ori	r24, 0x40	; 64
 146:	85 bd       	out	0x25, r24	; 37
 148:	0e c0       	rjmp	.+28     	; 0x166 <Timer_mode+0xc8>
			}else if (mode==pwm)
 14a:	62 30       	cpi	r22, 0x02	; 2
 14c:	39 f4       	brne	.+14     	; 0x15c <Timer_mode+0xbe>
			{
				TCCR2&=~(1<<6);
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	8f 7b       	andi	r24, 0xBF	; 191
 152:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(1<<3);
 154:	85 b5       	in	r24, 0x25	; 37
 156:	88 60       	ori	r24, 0x08	; 8
 158:	85 bd       	out	0x25, r24	; 37
 15a:	05 c0       	rjmp	.+10     	; 0x166 <Timer_mode+0xc8>
			}else if(mode== fastpwm)
 15c:	63 30       	cpi	r22, 0x03	; 3
 15e:	69 f5       	brne	.+90     	; 0x1ba <Timer_mode+0x11c>
			{
				TCCR2|=(0x48);
 160:	85 b5       	in	r24, 0x25	; 37
 162:	88 64       	ori	r24, 0x48	; 72
 164:	85 bd       	out	0x25, r24	; 37
			}else{
				return Function_Error;
			}
			ASSR=0x08;//make the timer clocked from the crystal
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	82 bd       	out	0x22, r24	; 34
			///***********compareoutmode
			if (compareoutmode==0)
 16a:	41 11       	cpse	r20, r1
 16c:	05 c0       	rjmp	.+10     	; 0x178 <Timer_mode+0xda>
			{
				TCCR2&=~(0x30);
 16e:	85 b5       	in	r24, 0x25	; 37
 170:	8f 7c       	andi	r24, 0xCF	; 207
 172:	85 bd       	out	0x25, r24	; 37
			{
				TCCR2|=(0x30);
			}else{
				return Function_Error; 
			}
			return Function_ok;
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	08 95       	ret
			ASSR=0x08;//make the timer clocked from the crystal
			///***********compareoutmode
			if (compareoutmode==0)
			{
				TCCR2&=~(0x30);
			}else if(compareoutmode==1)
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	41 f4       	brne	.+16     	; 0x18c <Timer_mode+0xee>
			{
				TCCR2|=(1<<4);
 17c:	85 b5       	in	r24, 0x25	; 37
 17e:	80 61       	ori	r24, 0x10	; 16
 180:	85 bd       	out	0x25, r24	; 37
				TCCR2&=~(1<<5);
 182:	85 b5       	in	r24, 0x25	; 37
 184:	8f 7d       	andi	r24, 0xDF	; 223
 186:	85 bd       	out	0x25, r24	; 37
			{
				TCCR2|=(0x30);
			}else{
				return Function_Error; 
			}
			return Function_ok;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
				TCCR2&=~(0x30);
			}else if(compareoutmode==1)
			{
				TCCR2|=(1<<4);
				TCCR2&=~(1<<5);
			}else if(compareoutmode==2)
 18c:	42 30       	cpi	r20, 0x02	; 2
 18e:	41 f4       	brne	.+16     	; 0x1a0 <Timer_mode+0x102>
			{
				TCCR2|=(1<<5);
 190:	85 b5       	in	r24, 0x25	; 37
 192:	80 62       	ori	r24, 0x20	; 32
 194:	85 bd       	out	0x25, r24	; 37
				TCCR2&=~(1<<4);
 196:	85 b5       	in	r24, 0x25	; 37
 198:	8f 7e       	andi	r24, 0xEF	; 239
 19a:	85 bd       	out	0x25, r24	; 37
			{
				TCCR2|=(0x30);
			}else{
				return Function_Error; 
			}
			return Function_ok;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
			}else if(compareoutmode==2)
			{
				TCCR2|=(1<<5);
				TCCR2&=~(1<<4);
				
			}else if (compareoutmode==3)
 1a0:	43 30       	cpi	r20, 0x03	; 3
 1a2:	69 f4       	brne	.+26     	; 0x1be <Timer_mode+0x120>
			{
				TCCR2|=(0x30);
 1a4:	85 b5       	in	r24, 0x25	; 37
 1a6:	80 63       	ori	r24, 0x30	; 48
 1a8:	85 bd       	out	0x25, r24	; 37
			}else{
				return Function_Error; 
			}
			return Function_ok;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
			break;
		default:
			return Function_Error;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	08 95       	ret
				TCCR0|=(1<<3);
			}else if(mode== fastpwm)
			{
				TCCR0|=(0x48);
			}else{
				return Function_Error;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	08 95       	ret
				
			}else if (compareoutmode==3)
			{
				TCCR0|=(0x30);
			}else{
				return Function_Error; 
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret
				TCCR2|=(1<<3);
			}else if(mode== fastpwm)
			{
				TCCR2|=(0x48);
			}else{
				return Function_Error;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	08 95       	ret
				
			}else if (compareoutmode==3)
			{
				TCCR2|=(0x30);
			}else{
				return Function_Error; 
 1be:	81 e0       	ldi	r24, 0x01	; 1
			return Function_ok;
			break;
		default:
			return Function_Error;
			}
}
 1c0:	08 95       	ret

000001c2 <Timer_InatialVal>:
//timer inatial value function
//input:timer number & inatial value required to set
//output :enum for function error state
//function :this function sets for the required timer the inatial value to start counting from
EN_functionstate_t Timer_InatialVal(uint8_t timernumber,uint8_t intvalue){
	switch(timernumber){
 1c2:	88 23       	and	r24, r24
 1c4:	19 f0       	breq	.+6      	; 0x1cc <Timer_InatialVal+0xa>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	21 f0       	breq	.+8      	; 0x1d2 <Timer_InatialVal+0x10>
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <Timer_InatialVal+0x16>
	case Timer_0:
	TCNT0=intvalue;
 1cc:	62 bf       	out	0x32, r22	; 50
	return Function_ok;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 95       	ret
	break;
	case Timer_2:
	TCNT2=intvalue;
 1d2:	64 bd       	out	0x24, r22	; 36
	return Function_ok;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
	break;
	default:
	return Function_Error;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
}
}
 1da:	08 95       	ret

000001dc <Timer_CompareVal>:
//timer set compare value
//input:timer number & compare value required to set
//output :enum for function error state
//function:this function sets the compare value for the specified timer
EN_functionstate_t Timer_CompareVal(uint8_t timernumber,uint8_t compvalue){
	switch(timernumber){
 1dc:	88 23       	and	r24, r24
 1de:	19 f0       	breq	.+6      	; 0x1e6 <Timer_CompareVal+0xa>
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	21 f0       	breq	.+8      	; 0x1ec <Timer_CompareVal+0x10>
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <Timer_CompareVal+0x16>
	case Timer_0:
	OCR0=compvalue;
 1e6:	6c bf       	out	0x3c, r22	; 60
	return Function_ok;
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret
	break;
	case Timer_2:
	OCR2=compvalue;
 1ec:	63 bd       	out	0x23, r22	; 35
	return Function_ok;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
	break;
	default:
	return Function_Error;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
}
}
 1f4:	08 95       	ret

000001f6 <Timer_intruptEnable>:
//timer intrupt enable
//input:timer number ,intrupt mode required to set
//output :enum for function error state
//function: it enable the required intrupt mode for the specified timer
EN_functionstate_t Timer_intruptEnable(uint8_t timernumber,uint8_t Intruptmodee){
	switch(timernumber){
 1f6:	88 23       	and	r24, r24
 1f8:	19 f0       	breq	.+6      	; 0x200 <Timer_intruptEnable+0xa>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	79 f0       	breq	.+30     	; 0x21c <Timer_intruptEnable+0x26>
 1fe:	1c c0       	rjmp	.+56     	; 0x238 <Timer_intruptEnable+0x42>
	case Timer_0:
		if (Intruptmodee==TOIE)
 200:	61 11       	cpse	r22, r1
 202:	05 c0       	rjmp	.+10     	; 0x20e <Timer_intruptEnable+0x18>
		{
			TIMSK|=(1<<0);
 204:	89 b7       	in	r24, 0x39	; 57
 206:	81 60       	ori	r24, 0x01	; 1
 208:	89 bf       	out	0x39, r24	; 57
		{
				TIMSK|=(1<<1);
		}else{
			return Function_Error;
		}
	return Function_ok;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret
	case Timer_0:
		if (Intruptmodee==TOIE)
		{
			TIMSK|=(1<<0);
		} 
		else if(Intruptmodee== OCIE)
 20e:	61 30       	cpi	r22, 0x01	; 1
 210:	a9 f4       	brne	.+42     	; 0x23c <Timer_intruptEnable+0x46>
		{
				TIMSK|=(1<<1);
 212:	89 b7       	in	r24, 0x39	; 57
 214:	82 60       	ori	r24, 0x02	; 2
 216:	89 bf       	out	0x39, r24	; 57
		}else{
			return Function_Error;
		}
	return Function_ok;
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret
	break;
	case Timer_2:
			if (Intruptmodee==TOIE)
 21c:	61 11       	cpse	r22, r1
 21e:	05 c0       	rjmp	.+10     	; 0x22a <Timer_intruptEnable+0x34>
			{
				TIMSK|=(1<<6);
 220:	89 b7       	in	r24, 0x39	; 57
 222:	80 64       	ori	r24, 0x40	; 64
 224:	89 bf       	out	0x39, r24	; 57
			{
				TIMSK|=(1<<7);
			}else{
				return Function_Error;
			}
	return Function_ok;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret
	case Timer_2:
			if (Intruptmodee==TOIE)
			{
				TIMSK|=(1<<6);
			}
			else if(Intruptmodee== OCIE)
 22a:	61 30       	cpi	r22, 0x01	; 1
 22c:	49 f4       	brne	.+18     	; 0x240 <Timer_intruptEnable+0x4a>
			{
				TIMSK|=(1<<7);
 22e:	89 b7       	in	r24, 0x39	; 57
 230:	80 68       	ori	r24, 0x80	; 128
 232:	89 bf       	out	0x39, r24	; 57
			}else{
				return Function_Error;
			}
	return Function_ok;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret
	break;
	default:
	return Function_Error;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	08 95       	ret
		} 
		else if(Intruptmodee== OCIE)
		{
				TIMSK|=(1<<1);
		}else{
			return Function_Error;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	08 95       	ret
			}
			else if(Intruptmodee== OCIE)
			{
				TIMSK|=(1<<7);
			}else{
				return Function_Error;
 240:	81 e0       	ldi	r24, 0x01	; 1
	return Function_ok;
	break;
	default:
	return Function_Error;
}
}
 242:	08 95       	ret

00000244 <Timer_intruptDisable>:
//timer intrupt disable
//input:timer number ,intrupt mode required to set
//output :enum for function error state
//function:it disable the required intrupt mode for the specified timer
EN_functionstate_t Timer_intruptDisable(uint8_t timernumber,uint8_t Intruptmodee){
	switch(timernumber){
 244:	88 23       	and	r24, r24
 246:	19 f0       	breq	.+6      	; 0x24e <Timer_intruptDisable+0xa>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	79 f0       	breq	.+30     	; 0x26a <Timer_intruptDisable+0x26>
 24c:	1c c0       	rjmp	.+56     	; 0x286 <Timer_intruptDisable+0x42>
	case Timer_0:
		if (Intruptmodee==TOIE)
 24e:	61 11       	cpse	r22, r1
 250:	05 c0       	rjmp	.+10     	; 0x25c <Timer_intruptDisable+0x18>
		{
			TIMSK&=~(1<<0);
 252:	89 b7       	in	r24, 0x39	; 57
 254:	8e 7f       	andi	r24, 0xFE	; 254
 256:	89 bf       	out	0x39, r24	; 57
		{
			TIMSK&=~(1<<1);
		}else{
			return Function_Error;
		}
	return Function_ok;
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	08 95       	ret
	case Timer_0:
		if (Intruptmodee==TOIE)
		{
			TIMSK&=~(1<<0);
		}
		else if(Intruptmodee== OCIE)
 25c:	61 30       	cpi	r22, 0x01	; 1
 25e:	a9 f4       	brne	.+42     	; 0x28a <Timer_intruptDisable+0x46>
		{
			TIMSK&=~(1<<1);
 260:	89 b7       	in	r24, 0x39	; 57
 262:	8d 7f       	andi	r24, 0xFD	; 253
 264:	89 bf       	out	0x39, r24	; 57
		}else{
			return Function_Error;
		}
	return Function_ok;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
	break;
	case Timer_2:
		if (Intruptmodee==TOIE)
 26a:	61 11       	cpse	r22, r1
 26c:	05 c0       	rjmp	.+10     	; 0x278 <Timer_intruptDisable+0x34>
		{
			TIMSK&=~(1<<6);
 26e:	89 b7       	in	r24, 0x39	; 57
 270:	8f 7b       	andi	r24, 0xBF	; 191
 272:	89 bf       	out	0x39, r24	; 57
		{
			TIMSK&=~(1<<7);
		}else{
			return Function_Error;
		}
	return Function_ok;
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
	case Timer_2:
		if (Intruptmodee==TOIE)
		{
			TIMSK&=~(1<<6);
		}
		else if(Intruptmodee== OCIE)
 278:	61 30       	cpi	r22, 0x01	; 1
 27a:	49 f4       	brne	.+18     	; 0x28e <Timer_intruptDisable+0x4a>
		{
			TIMSK&=~(1<<7);
 27c:	89 b7       	in	r24, 0x39	; 57
 27e:	8f 77       	andi	r24, 0x7F	; 127
 280:	89 bf       	out	0x39, r24	; 57
		}else{
			return Function_Error;
		}
	return Function_ok;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret
	break;
	default:
	return Function_Error;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	08 95       	ret
		}
		else if(Intruptmodee== OCIE)
		{
			TIMSK&=~(1<<1);
		}else{
			return Function_Error;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	08 95       	ret
		}
		else if(Intruptmodee== OCIE)
		{
			TIMSK&=~(1<<7);
		}else{
			return Function_Error;
 28e:	81 e0       	ldi	r24, 0x01	; 1
	return Function_ok;
	break;
	default:
	return Function_Error;
}
}
 290:	08 95       	ret

00000292 <Timer_StartPRESCalerValue>:
//timer start & setingprescale value
//input:timer number & prescalemode
//output :enum for function error state
//function:it sets the prescaler value for therequired timer letting it to start
EN_functionstate_t Timer_StartPRESCalerValue(uint8_t timernumber,uint8_t prescalermodes){
	switch(timernumber){
 292:	88 23       	and	r24, r24
 294:	21 f0       	breq	.+8      	; 0x29e <Timer_StartPRESCalerValue+0xc>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	09 f4       	brne	.+2      	; 0x29c <Timer_StartPRESCalerValue+0xa>
 29a:	46 c0       	rjmp	.+140    	; 0x328 <Timer_StartPRESCalerValue+0x96>
 29c:	8a c0       	rjmp	.+276    	; 0x3b2 <Timer_StartPRESCalerValue+0x120>
		case Timer_0:
			switch(prescalermodes){
 29e:	86 2f       	mov	r24, r22
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	88 30       	cpi	r24, 0x08	; 8
 2a4:	91 05       	cpc	r25, r1
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <Timer_StartPRESCalerValue+0x18>
 2a8:	86 c0       	rjmp	.+268    	; 0x3b6 <Timer_StartPRESCalerValue+0x124>
 2aa:	fc 01       	movw	r30, r24
 2ac:	e6 5d       	subi	r30, 0xD6	; 214
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__tablejump2__>
				case 0:
				TCCR0 &=~(0x07);
 2b4:	83 b7       	in	r24, 0x33	; 51
 2b6:	88 7f       	andi	r24, 0xF8	; 248
 2b8:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
	switch(timernumber){
		case Timer_0:
			switch(prescalermodes){
				case 0:
				TCCR0 &=~(0x07);
				break;
 2bc:	08 95       	ret
				case 1:
				TCCR0 &=~(0x06);
 2be:	83 b7       	in	r24, 0x33	; 51
 2c0:	89 7f       	andi	r24, 0xF9	; 249
 2c2:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(1<<0);
 2c4:	83 b7       	in	r24, 0x33	; 51
 2c6:	81 60       	ori	r24, 0x01	; 1
 2c8:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
				TCCR0 &=~(0x07);
				break;
				case 1:
				TCCR0 &=~(0x06);
				TCCR0|=(1<<0);
				break;
 2cc:	08 95       	ret
				case 2:
				TCCR0 &=~(0x05);
 2ce:	83 b7       	in	r24, 0x33	; 51
 2d0:	8a 7f       	andi	r24, 0xFA	; 250
 2d2:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(1<<1);
 2d4:	83 b7       	in	r24, 0x33	; 51
 2d6:	82 60       	ori	r24, 0x02	; 2
 2d8:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 2da:	80 e0       	ldi	r24, 0x00	; 0
				TCCR0|=(1<<0);
				break;
				case 2:
				TCCR0 &=~(0x05);
				TCCR0|=(1<<1);
				break;
 2dc:	08 95       	ret
				case 3:
				TCCR0 &=~(1<<2);
 2de:	83 b7       	in	r24, 0x33	; 51
 2e0:	8b 7f       	andi	r24, 0xFB	; 251
 2e2:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(0x03);
 2e4:	83 b7       	in	r24, 0x33	; 51
 2e6:	83 60       	ori	r24, 0x03	; 3
 2e8:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
				TCCR0|=(1<<1);
				break;
				case 3:
				TCCR0 &=~(1<<2);
				TCCR0|=(0x03);
				break;
 2ec:	08 95       	ret
				case 4:
				TCCR0 &=~(0x03);
 2ee:	83 b7       	in	r24, 0x33	; 51
 2f0:	8c 7f       	andi	r24, 0xFC	; 252
 2f2:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(1<<2);
 2f4:	83 b7       	in	r24, 0x33	; 51
 2f6:	84 60       	ori	r24, 0x04	; 4
 2f8:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
				TCCR0|=(0x03);
				break;
				case 4:
				TCCR0 &=~(0x03);
				TCCR0|=(1<<2);
				break;
 2fc:	08 95       	ret
				case 5:
				TCCR0 &=~(1<<1);
 2fe:	83 b7       	in	r24, 0x33	; 51
 300:	8d 7f       	andi	r24, 0xFD	; 253
 302:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(0x05);
 304:	83 b7       	in	r24, 0x33	; 51
 306:	85 60       	ori	r24, 0x05	; 5
 308:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 30a:	80 e0       	ldi	r24, 0x00	; 0
				TCCR0|=(1<<2);
				break;
				case 5:
				TCCR0 &=~(1<<1);
				TCCR0|=(0x05);
				break;
 30c:	08 95       	ret
				case 6:
				TCCR0 &=~(1<<0);
 30e:	83 b7       	in	r24, 0x33	; 51
 310:	8e 7f       	andi	r24, 0xFE	; 254
 312:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(0x06);
 314:	83 b7       	in	r24, 0x33	; 51
 316:	86 60       	ori	r24, 0x06	; 6
 318:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 31a:	80 e0       	ldi	r24, 0x00	; 0
				TCCR0|=(0x05);
				break;
				case 6:
				TCCR0 &=~(1<<0);
				TCCR0|=(0x06);
				break;
 31c:	08 95       	ret
				case 7:
				TCCR0|=(0x07);
 31e:	83 b7       	in	r24, 0x33	; 51
 320:	87 60       	ori	r24, 0x07	; 7
 322:	83 bf       	out	0x33, r24	; 51
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 324:	80 e0       	ldi	r24, 0x00	; 0
				TCCR0 &=~(1<<0);
				TCCR0|=(0x06);
				break;
				case 7:
				TCCR0|=(0x07);
				break;
 326:	08 95       	ret
			}
		return Function_ok;
		break;
		//***********timer 2
		case Timer_2:
			switch(prescalermodes){
 328:	86 2f       	mov	r24, r22
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	88 30       	cpi	r24, 0x08	; 8
 32e:	91 05       	cpc	r25, r1
 330:	08 f0       	brcs	.+2      	; 0x334 <Timer_StartPRESCalerValue+0xa2>
 332:	43 c0       	rjmp	.+134    	; 0x3ba <Timer_StartPRESCalerValue+0x128>
 334:	fc 01       	movw	r30, r24
 336:	ee 5c       	subi	r30, 0xCE	; 206
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__tablejump2__>
				case 0:
				TCCR2 &=~(0x07);
 33e:	85 b5       	in	r24, 0x25	; 37
 340:	88 7f       	andi	r24, 0xF8	; 248
 342:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 344:	80 e0       	ldi	r24, 0x00	; 0
		//***********timer 2
		case Timer_2:
			switch(prescalermodes){
				case 0:
				TCCR2 &=~(0x07);
				break;
 346:	08 95       	ret
				case 1:
				TCCR2 &=~(0x06);
 348:	85 b5       	in	r24, 0x25	; 37
 34a:	89 7f       	andi	r24, 0xF9	; 249
 34c:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(1<<0);
 34e:	85 b5       	in	r24, 0x25	; 37
 350:	81 60       	ori	r24, 0x01	; 1
 352:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 354:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2 &=~(0x07);
				break;
				case 1:
				TCCR2 &=~(0x06);
				TCCR2|=(1<<0);
				break;
 356:	08 95       	ret
				case 2:
				TCCR2 &=~(0x05);
 358:	85 b5       	in	r24, 0x25	; 37
 35a:	8a 7f       	andi	r24, 0xFA	; 250
 35c:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(1<<1);
 35e:	85 b5       	in	r24, 0x25	; 37
 360:	82 60       	ori	r24, 0x02	; 2
 362:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 364:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|=(1<<0);
				break;
				case 2:
				TCCR2 &=~(0x05);
				TCCR2|=(1<<1);
				break;
 366:	08 95       	ret
				case 3:
				TCCR2 &=~(1<<2);
 368:	85 b5       	in	r24, 0x25	; 37
 36a:	8b 7f       	andi	r24, 0xFB	; 251
 36c:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(0x03);
 36e:	85 b5       	in	r24, 0x25	; 37
 370:	83 60       	ori	r24, 0x03	; 3
 372:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 374:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|=(1<<1);
				break;
				case 3:
				TCCR2 &=~(1<<2);
				TCCR2|=(0x03);
				break;
 376:	08 95       	ret
				case 4:
				TCCR2 &=~(0x03);
 378:	85 b5       	in	r24, 0x25	; 37
 37a:	8c 7f       	andi	r24, 0xFC	; 252
 37c:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(1<<2);
 37e:	85 b5       	in	r24, 0x25	; 37
 380:	84 60       	ori	r24, 0x04	; 4
 382:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 384:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|=(0x03);
				break;
				case 4:
				TCCR2 &=~(0x03);
				TCCR2|=(1<<2);
				break;
 386:	08 95       	ret
				case 5:
				TCCR2 &=~(1<<1);
 388:	85 b5       	in	r24, 0x25	; 37
 38a:	8d 7f       	andi	r24, 0xFD	; 253
 38c:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(0x05);
 38e:	85 b5       	in	r24, 0x25	; 37
 390:	85 60       	ori	r24, 0x05	; 5
 392:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 394:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|=(1<<2);
				break;
				case 5:
				TCCR2 &=~(1<<1);
				TCCR2|=(0x05);
				break;
 396:	08 95       	ret
				case 6:
				TCCR2 &=~(1<<0);
 398:	85 b5       	in	r24, 0x25	; 37
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(0x06);
 39e:	85 b5       	in	r24, 0x25	; 37
 3a0:	86 60       	ori	r24, 0x06	; 6
 3a2:	85 bd       	out	0x25, r24	; 37
				TCCR2|=(0x07);
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2|=(0x05);
				break;
				case 6:
				TCCR2 &=~(1<<0);
				TCCR2|=(0x06);
				break;
 3a6:	08 95       	ret
				case 7:
				TCCR2|=(0x07);
 3a8:	85 b5       	in	r24, 0x25	; 37
 3aa:	87 60       	ori	r24, 0x07	; 7
 3ac:	85 bd       	out	0x25, r24	; 37
				break;
				default:
				return Function_Error;
			}
		return Function_ok;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
				TCCR2 &=~(1<<0);
				TCCR2|=(0x06);
				break;
				case 7:
				TCCR2|=(0x07);
				break;
 3b0:	08 95       	ret
				return Function_Error;
			}
		return Function_ok;
		break;
		default:
		return Function_Error;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	08 95       	ret
				break;
				case 7:
				TCCR0|=(0x07);
				break;
				default:
				return Function_Error;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	08 95       	ret
				break;
				case 7:
				TCCR2|=(0x07);
				break;
				default:
				return Function_Error;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
		return Function_ok;
		break;
		default:
		return Function_Error;
	}
}
 3bc:	08 95       	ret

000003be <Timer_ReadFlag>:
//timer read a flag
//input:timernumber ,timer flag ,address for the variable to save the flag
//output :enum for function error state
//function:it reads the required flag from a specific timer and returns it to an address
EN_functionstate_t Timer_ReadFlag(uint8_t timernumber,uint8_t timerflag,uint8_t *read){
	switch(timernumber){
 3be:	88 23       	and	r24, r24
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <Timer_ReadFlag+0xa>
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	d1 f0       	breq	.+52     	; 0x3fa <Timer_ReadFlag+0x3c>
 3c6:	3a c0       	rjmp	.+116    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		case Timer_0:
			if (timerflag==TOV)
 3c8:	61 11       	cpse	r22, r1
 3ca:	09 c0       	rjmp	.+18     	; 0x3de <Timer_ReadFlag+0x20>
			{
				*read=(TIFR &(1<<0))>>0;
 3cc:	88 b7       	in	r24, 0x38	; 56
 3ce:	81 70       	andi	r24, 0x01	; 1
 3d0:	fa 01       	movw	r30, r20
 3d2:	80 83       	st	Z, r24
				TIFR|=(1<<0);
 3d4:	88 b7       	in	r24, 0x38	; 56
 3d6:	81 60       	ori	r24, 0x01	; 1
 3d8:	88 bf       	out	0x38, r24	; 56
			}
			else
			{
				return Function_Error;
			}
		return Function_ok;
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
			if (timerflag==TOV)
			{
				*read=(TIFR &(1<<0))>>0;
				TIFR|=(1<<0);
			}
			else if (timerflag==OCF)
 3de:	61 30       	cpi	r22, 0x01	; 1
 3e0:	79 f5       	brne	.+94     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			{
				*read=(TIFR &(1<<1))>>1;
 3e2:	88 b7       	in	r24, 0x38	; 56
 3e4:	82 70       	andi	r24, 0x02	; 2
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	95 95       	asr	r25
 3ea:	87 95       	ror	r24
 3ec:	fa 01       	movw	r30, r20
 3ee:	80 83       	st	Z, r24
				TIFR|=(1<<1);
 3f0:	88 b7       	in	r24, 0x38	; 56
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	88 bf       	out	0x38, r24	; 56
			}
			else
			{
				return Function_Error;
			}
		return Function_ok;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
		break;
		//********timer2
		case Timer_2:
			if (timerflag==TOV)
 3fa:	61 11       	cpse	r22, r1
 3fc:	12 c0       	rjmp	.+36     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			{
				*read=(TIFR &(1<<6))>>6;
 3fe:	88 b7       	in	r24, 0x38	; 56
 400:	80 74       	andi	r24, 0x40	; 64
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	08 2e       	mov	r0, r24
 406:	89 2f       	mov	r24, r25
 408:	00 0c       	add	r0, r0
 40a:	88 1f       	adc	r24, r24
 40c:	99 0b       	sbc	r25, r25
 40e:	00 0c       	add	r0, r0
 410:	88 1f       	adc	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	fa 01       	movw	r30, r20
 416:	80 83       	st	Z, r24
				TIFR|=(1<<6);
 418:	88 b7       	in	r24, 0x38	; 56
 41a:	80 64       	ori	r24, 0x40	; 64
 41c:	88 bf       	out	0x38, r24	; 56
			}
			else
			{
				return Function_Error;
			}
		return Function_ok;
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret
			if (timerflag==TOV)
			{
				*read=(TIFR &(1<<6))>>6;
				TIFR|=(1<<6);
			}
			else if (timerflag==OCF)
 422:	61 30       	cpi	r22, 0x01	; 1
 424:	79 f4       	brne	.+30     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			{
				*read=(TIFR &(1<<7))>>7;
 426:	88 b7       	in	r24, 0x38	; 56
 428:	88 1f       	adc	r24, r24
 42a:	88 27       	eor	r24, r24
 42c:	88 1f       	adc	r24, r24
 42e:	fa 01       	movw	r30, r20
 430:	80 83       	st	Z, r24
				TIFR|=(1<<7);
 432:	88 b7       	in	r24, 0x38	; 56
 434:	80 68       	ori	r24, 0x80	; 128
 436:	88 bf       	out	0x38, r24	; 56
			}
			else
			{
				return Function_Error;
			}
		return Function_ok;
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	08 95       	ret
		break;
		default:
		return Function_Error;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	08 95       	ret
				*read=(TIFR &(1<<1))>>1;
				TIFR|=(1<<1);
			}
			else
			{
				return Function_Error;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	08 95       	ret
				*read=(TIFR &(1<<7))>>7;
				TIFR|=(1<<7);
			}
			else
			{
				return Function_Error;
 444:	81 e0       	ldi	r24, 0x01	; 1
		return Function_ok;
		break;
		default:
		return Function_Error;
	}
}
 446:	08 95       	ret

00000448 <Timer_Test>:
//timer test function
//input:void
//output :enum for driver error state
//function: it calls all the apis of the drivers and returns driiver_ok if all the apis functioned ok
EN_Driverstate_t Timer_Test(){
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	1f 92       	push	r1
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
	#define Intermod TOIE
	#define presmode 1
	volatile uint8_t state;
	#define timeflg OCF
	
	if (Timer_mode(timerNO, mod, compmod)!=Function_ok)
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 4f 00 	call	0x9e	; 0x9e <Timer_mode>
 45c:	81 11       	cpse	r24, r1
 45e:	23 c0       	rjmp	.+70     	; 0x4a6 <Timer_Test+0x5e>
	{
		return Driver_Error;
	} 
	else if(Timer_InatialVal(timerNO,intval )!=Function_ok)
 460:	60 e3       	ldi	r22, 0x30	; 48
 462:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Timer_InatialVal>
 466:	81 11       	cpse	r24, r1
 468:	20 c0       	rjmp	.+64     	; 0x4aa <Timer_Test+0x62>
	{
		return Driver_Error;

	}else if (Timer_CompareVal(timerNO, cmpval)!=Function_ok)
 46a:	63 ef       	ldi	r22, 0xF3	; 243
 46c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Timer_CompareVal>
 470:	81 11       	cpse	r24, r1
 472:	1d c0       	rjmp	.+58     	; 0x4ae <Timer_Test+0x66>
	{
		return Driver_Error;

	}else if (Timer_intruptEnable(timerNO,Intermod )!=Function_ok)
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Timer_intruptEnable>
 47a:	81 11       	cpse	r24, r1
 47c:	1a c0       	rjmp	.+52     	; 0x4b2 <Timer_Test+0x6a>
	{
		return Driver_Error;

	}else if (Timer_intruptDisable(timerNO, Intermod)!=Function_ok)
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	0e 94 22 01 	call	0x244	; 0x244 <Timer_intruptDisable>
 484:	81 11       	cpse	r24, r1
 486:	17 c0       	rjmp	.+46     	; 0x4b6 <Timer_Test+0x6e>
	{	
		return Driver_Error;

	}else if (Timer_StartPRESCalerValue(timerNO, presmode)!=Function_ok)
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	0e 94 49 01 	call	0x292	; 0x292 <Timer_StartPRESCalerValue>
 48e:	81 11       	cpse	r24, r1
 490:	14 c0       	rjmp	.+40     	; 0x4ba <Timer_Test+0x72>
	{
		return Driver_Error;

	}else if (Timer_ReadFlag(timerNO, timeflg, &state)!=Function_ok)
 492:	ae 01       	movw	r20, r28
 494:	4f 5f       	subi	r20, 0xFF	; 255
 496:	5f 4f       	sbci	r21, 0xFF	; 255
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	0e 94 df 01 	call	0x3be	; 0x3be <Timer_ReadFlag>
 49e:	88 23       	and	r24, r24
 4a0:	71 f0       	breq	.+28     	; 0x4be <Timer_Test+0x76>
	{
		return Driver_Error;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <Timer_Test+0x78>
	volatile uint8_t state;
	#define timeflg OCF
	
	if (Timer_mode(timerNO, mod, compmod)!=Function_ok)
	{
		return Driver_Error;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <Timer_Test+0x78>
	} 
	else if(Timer_InatialVal(timerNO,intval )!=Function_ok)
	{
		return Driver_Error;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <Timer_Test+0x78>

	}else if (Timer_CompareVal(timerNO, cmpval)!=Function_ok)
	{
		return Driver_Error;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <Timer_Test+0x78>

	}else if (Timer_intruptEnable(timerNO,Intermod )!=Function_ok)
	{
		return Driver_Error;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <Timer_Test+0x78>

	}else if (Timer_intruptDisable(timerNO, Intermod)!=Function_ok)
	{	
		return Driver_Error;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <Timer_Test+0x78>

	}else if (Timer_StartPRESCalerValue(timerNO, presmode)!=Function_ok)
	{
		return Driver_Error;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <Timer_Test+0x78>
	}else if (Timer_ReadFlag(timerNO, timeflg, &state)!=Function_ok)
	{
		return Driver_Error;

	}else{
		return Driver_ok;
 4be:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 4c0:	0f 90       	pop	r0
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <__tablejump2__>:
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	05 90       	lpm	r0, Z+
 4ce:	f4 91       	lpm	r31, Z
 4d0:	e0 2d       	mov	r30, r0
 4d2:	09 94       	ijmp

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
